# Testing
# # For this purpose, we will use the example dataset ERPdata from the package erp.easy.
library(erp.easy)
my_erpdata <- ERPdata  # ERPdata from erp.easy will be used
ind_average_erp <- function(my_erpdata, electrode = 6, subject = 'SO1') {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
# compute grand average (GA):
ind_average_erp_data <- array(NA, dim = c(length(subject),length(cond),length(time)));
for (s in 1:length(subject)) { # all subjects
for (c in 1:length(cond)) { # all conditions
ind_average_erp_data[s,c,] <- my_erpdata[my_erpdata[,1] == subject[s] & my_erpdata[,2] == cond[c],electrode] # compute GA
}
}
return(ind_average_erp_data)
}
ind_average_erp_data <- ind_average_erp(my_erpdata, electrode = 7, subject = c('S1', 'S2', 'S3'))
ind_average_erp_plot <- function(my_erpdata, ind_average_erp_data) {
colours <- c('red', 'green', 'blue', 'black', 'green')
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
for (s in 1:nrow(ind_average_erp_data)) {
for (i in 1:ncol(ind_average_erp_data)) {
if (i ==1) {
plot(ind_average_erp_data[s,i,], type = "l", col = colours[i], ylim = c(-30,30), ylab = 'Amplitude', xlab = 'Time (ms)', xaxt = "n", main = paste('ERP Plot for ', length(cond), 'conditions'))
}
else if (i >= 2) {
lines(ind_average_erp_data[s,i,], col = colours[i])
}
}
legend('topleft', legend=cond, col=colours[1:i], lty=1, cex=0.8)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(timepoints == j)
}
axis(1, at = index_time, labels = desired_timepoints)
}
}
ind_average_erp_plot(my_erpdata, ind_average_erp_data)
grand_average_erp <- function(my_erpdata, electrode = 6) {
subjects <- unique(my_erpdata[,1])
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
#subjects <- unique(my_erpdata[,1])
# compute grand average (GA):
grand_average_erp_data <- array(NA, dim = c(length(subjects),length(cond),length(time)));
for (s in 1:length(subjects)) { # all subjects
for (c in 1:length(cond)) { # all conditions
grand_average_erp_data[s,c,] <- my_erpdata[my_erpdata[,1] == subjects[s] & my_erpdata[,2] == cond[c],electrode] # compute GA
}
}
grand_average_erp_data <- colMeans(grand_average_erp_data) #
return(grand_average_erp_data)
}
grand_average_erp_data <- grand_average_erp(my_erpdata, electrode = 7)
grand_average_erp_plot <- function(my_erpdata, grand_average_erp_data) {
colours <- c('blue', 'black')
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
for (i in 1:nrow(grand_average_erp_data)) { # number of conditions
if (i ==1) {
plot(grand_average_erp_data[i,], type = "l", col = colours[i], ylab = 'Amplitude', xlab = 'Time (ms)', xaxt = "n", main = paste('ERP Plot for ', length(cond), 'conditions'))
}
else if (i >= 2) {
lines(grand_average_erp_data[i,], col = colours[i])
}
}
legend('topleft', legend=cond, col=colours[1:i], lty=1, cex=0.8)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(time == j)
}
axis(1, at = index_time, labels = desired_timepoints)
}
grand_average_erp_plot(my_erpdata, grand_average_erp_data)
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(conditions),length(timepoints), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp_plot <- function(my_erspdata, grand_average_ersp_data, n_cond) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
# get the right label for the heatmap
labRow_label = seq(from = time[1], to = time[length(time)], by = 1)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400,)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(time == j)
}
labRow_label <- NA
labRow_label[index_time] <- desired_timepoints
# make the heatmap
data <- t(as.matrix(grand_average_ersp_data[n_cond,,]))
heatmap(data, Colv = NA, Rowv = NA, ylab = 'Frequency', xlab = 'Time (ms)', xaxt = "n", labCol = labRow_label)
}
grand_average_ersp_plot(my_erpdata, grand_average_ersp_data, n_cond = 1)
my_erpdata
grand_average_ersp_data
grand_average_ersp_data
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(conditions),length(timepoints), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(cond),length(timepoints), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
# 5. grand average ersp
#' grand_average_ersp
#' @description  The function \emph{grand_average_ersp} computes the grand average  ERSP signal for all conditions and all frequencies from one electrode.
#' @param my_erspdata Input Matrix with shape: subject ID x condition x timex frequency (from only one electrode).
#' @details For more details, see Wikipedie page: \href{https://sccn.ucsd.edu/wiki/Chapter_11:_Time/Frequency_decomposition}{article}
#' @return A matrix that contains the grand average ERSP for all conditions and all frequencies of one electrode. The matrix will be of shape condition x time x frequency.
#' @export grand_average_ersp_data
#' @seealso Add example of similar functions [still to be done].
cond <- unique(my_erpdata[,2])
# 5. grand average ersp
#' grand_average_ersp
#' @description  The function \emph{grand_average_ersp} computes the grand average  ERSP signal for all conditions and all frequencies from one electrode.
#' @param my_erspdata Input Matrix with shape: subject ID x condition x timex frequency (from only one electrode).
#' @details For more details, see Wikipedie page: \href{https://sccn.ucsd.edu/wiki/Chapter_11:_Time/Frequency_decomposition}{article}
#' @return A matrix that contains the grand average ERSP for all conditions and all frequencies of one electrode. The matrix will be of shape condition x time x frequency.
#' @export grand_average_ersp_data
#' @seealso Add example of similar functions [still to be done].
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(cond),length(time), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp_data
ind_average_erp_plot <- function(my_erpdata, ind_average_erp_data) {
colours <- c('red', 'green', 'blue', 'black', 'green')
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
for (s in 1:nrow(ind_average_erp_data)) {
for (i in 1:ncol(ind_average_erp_data)) {
if (i ==1) {
plot(ind_average_erp_data[s,i,], type = "l", col = colours[i], ylim = c(-30,30), ylab = 'Amplitude', xlab = 'Time (ms)', xaxt = "n", main = paste('ERP Plot for ', length(cond), 'conditions'))
}
else if (i >= 2) {
lines(ind_average_erp_data[s,i,], col = colours[i])
}
}
legend('topleft', legend=cond, col=colours[1:i], lty=1, cex=0.8)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(timepoints == j)
}
axis(1, at = index_time, labels = desired_timepoints)
}
}
ind_average_erp_plot(my_erpdata, ind_average_erp_data)
# 8. ERSP / ERP correlation
my_erpdata
ind_average_erp_data
my_erpdata
unique(my_erpdata[,1])
electrode
electrode = 6
my_erpdata[my_erpdata[,1] == s,electrode]
for (s in 1:unique(my_erpdata[,1])) {
}
my_erpdata[my_erpdata[,1] == s,electrode]
s
my_erpdata[s,1]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1]),electrode]
my_erpdata[,1] == my_erpdata[s,1])
y_erpdata[my_erpdata[,1] == my_erpdata[s,1],electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1],electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1],electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1],]
time_erp = 100
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[s,3] == time_erp, electrode]
time_erp
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[s,3] == 68, electrode]
my_erpdata[s,3] == 8
my_erpdata[,3] == 8
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8, electrode]
electrode
my_erpdata[,3] == 8
sum(my_erpdata[,3] == 8)
my_erpdata[,1] == my_erpdata[s,1]
my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8
sum(my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8)
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8,]
time_erp = 8
unique(my_erpdata[,2]))
unique(my_erpdata[,2])
c = 2
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] == c, electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
erp_ersp <- matrix(NA, 4, unique(my_erpdata[,1]))
erp_ersp[,1] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
erp_ersp <- matrix(NA, unique(my_erpdata[,1]), 4)
erp_ersp[,1] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
erp_ersp <- matrix(NA, unique(my_erpdata[,1]), 4)
erp_ersp <- matrix(NA, length(unique(my_erpdata[,1])), 4)
erp_ersp[,1] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
grand_average_ersp_data
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 4)   # subject x cond
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:unique(my_erpdata[,2])) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
for (c in 1:unique(my_erpdata[,2])) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
for (c in 1:length(unique(my_erpdata[,2])) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
for (c in 1:length(unique(my_erpdata[,2])) { # cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
ersp
cor(erp, ersp)
erp
ersp
cor(erp, ersp)
rcorr(erp, ersp)
corr(erp, ersp)
cor(erp, ersp)
erp == ersp
cor(erp, ersp)
cor(erp, ersp, )
cor(erp, ersp)
cor(erp[,1], ersp[,2])
cor(erp[,2], ersp[,2])
cor(erp[,1], ersp[,2])
erp_ersp_cor <- function(my_erpdata, electrode, time_erp, cond) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(cor(erp[,1], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40, 1)
erp_ersp_cor(my_erpdata, 10, 40, 2
)
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(cor(erp[,1], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
cor(erp[,1], ersp[,1])
return(cor(erp[,2], ersp[,2]))
cor(erp[,2], ersp[,2])
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(list(cor(erp[,1], ersp[,1]), cor(erp[,2], ersp[,2]))
#return(cor(erp[,2], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
)
erp_ersp_cor(my_erpdata, 10, 40)
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(list(cor(erp[,1], ersp[,1]), cor(erp[,2], ersp[,2])))
#return(cor(erp[,2], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
)
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(list(cor(erp[,1], ersp[,1]), cor(erp[,2], ersp[,2])))
#return(cor(erp[,2], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
